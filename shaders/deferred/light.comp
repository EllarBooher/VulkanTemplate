#version 460
#extension GL_EXT_buffer_reference2 : require
#extension GL_ARB_shading_language_include : require

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba16, set = 0, binding = 0) uniform image2D image;

layout(set = 1, binding = 0) uniform sampler2D gbuffer_Diffuse;                                                     
layout(set = 1, binding = 1) uniform sampler2D gbuffer_Specular;                                                    
layout(set = 1, binding = 2) uniform sampler2D gbuffer_Normal;                                                      
layout(set = 1, binding = 3) uniform sampler2D gbuffer_WorldPosition;                                               
layout(set = 1, binding = 4) uniform sampler2D gbuffer_OcclusionRoughnessMetallic;

struct GBufferTexel
{
    vec4 position;
    vec4 normal;
    vec4 diffuseColor;
    vec4 specularColor;
    vec4 occlusionRoughnessMetallic;
};

struct PBRTexel
{
    vec3 position;
    vec3 normal;
    vec3 subscatteringColor;
    vec3 normalReflectance;
    float occlusion;
    float specularPower;
    float metallic;
};

GBufferTexel sampleGBuffer(const vec2 uv)
{
    GBufferTexel texel;
    texel.diffuseColor = texture(gbuffer_Diffuse, uv);
    texel.specularColor = texture(gbuffer_Specular, uv);
    texel.normal = texture(gbuffer_Normal, uv);
    texel.position = texture(gbuffer_WorldPosition, uv);
    texel.occlusionRoughnessMetallic = texture(gbuffer_OcclusionRoughnessMetallic, uv);

    return texel;
}

float max3(const vec3 rgb) { return max(max(rgb.r, rgb.g), rgb.b); }

PBRTexel convertPBRProperties(const GBufferTexel gbuffer)
{
    const float specularPower = 160;

    const vec3 dialectricReflectence = vec3(0.04);
    const vec3 metallicReflectence = vec3(0.5) * gbuffer.specularColor.rgb / max3(gbuffer.specularColor.rgb);

    const float metallic = gbuffer.occlusionRoughnessMetallic.b;

    return PBRTexel(
        /* position = */ gbuffer.position.xyz,
        /* normal = */ gbuffer.normal.xyz,
        /* subscatteringColor = */ gbuffer.diffuseColor.rgb,
        /* normalReflectance = */ mix(dialectricReflectence, metallicReflectence, metallic),
        /* occlusion = */ gbuffer.occlusionRoughnessMetallic.r,
        /* roughness = */ pow(specularPower, 1.0 - gbuffer.occlusionRoughnessMetallic.g),
        /* metallic = */ metallic);
}

vec3 computeFresnel(const PBRTexel material, const vec3 lightOutgoing, const vec3 viewOutgoing)
{
    const vec3 halfwayDirection = normalize(lightOutgoing + viewOutgoing);

    // Schlick approximation of fresnel reflection
    const vec3 fresnel =
        material.normalReflectance
        + (1.0 - material.normalReflectance) * pow(1.0 - clamp(dot(halfwayDirection, lightOutgoing), 0.0, 1.0), 5);

    return fresnel;
}

vec3 diffuseBRDF(const PBRTexel material, const vec3 lightOutgoing)
{
    // Lambertian BRDF

    return material.subscatteringColor / 3.14159265359;
}

vec3 specularBRDF(const PBRTexel material, const vec3 lightOutgoing, const vec3 viewOutgoing)
{
    const vec3 halfwayDirection = normalize(lightOutgoing + viewOutgoing);

    const float specularPower = material.specularPower;
    const float microfacetDistribution = pow(clamp(dot(halfwayDirection, material.normal), 0.0, 1.0), specularPower);

    // Without this term, the overall brightness decreases as roughness increases
    const float normalizationTerm = (specularPower + 2) / 8.0;

    return vec3(normalizationTerm * microfacetDistribution);
    //return vec3(100.0 * clamp(dot(lightOutgoing, material.normal), 0.0, 1.0));
}

layout(push_constant) uniform PushConstant
{
    vec2 offset;
    vec2 gBufferCapacity;

    vec4 cameraPosition;
} pc;

struct IncomingLight
{
    vec3 lightDirectionUnit;
    vec3 lightSpectralFactor;
};

vec3 computeLightContribution(const vec3 lightForward, const PBRTexel material, const vec3 viewDirection)
{
    // Our model uses a microfacet specular BRDF layered with a diffuse BRDF
    // The assumption is that all diffuse light is scattered from whatever is not reflected as a specular highlight

    const vec3 lightDirection = normalize(-lightForward);

    const vec3 diffuseContribution = diffuseBRDF(material, lightDirection);
    const vec3 specularContribution = specularBRDF(material, lightDirection, viewDirection);

    const vec3 fresnel = computeFresnel(material, lightDirection, viewDirection);

    // Lerping preserves the energy conservation of our BRDFs
    return material.occlusion * mix(diffuseContribution, specularContribution, fresnel)
         * clamp(dot(material.normal, lightDirection), 0.0, 1.0);
}

void main()
{
    const vec2 size = imageSize(image);
    const ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy + pc.offset);
    if (texelCoord.x >= size.x || texelCoord.y >= size.y)
    {
        return;
    }

    // The uv needs to be offset to avoid floating point errors on texel boundaries
    const vec2 offset = vec2(0.5, 0.5);
    const vec2 gbufferUV = (vec2(texelCoord) + offset) / pc.gBufferCapacity;

    const GBufferTexel gbufferTexel = sampleGBuffer(gbufferUV);

    // No transparent geometry for now, less than 1.0 alpha indicates background texels
    if (gbufferTexel.diffuseColor.a < 1.0)
    {
        imageStore(image, texelCoord, vec4(0.0, 0.2, 0.0, 1.0));
        return;
    }

    const PBRTexel material = convertPBRProperties(gbufferTexel);

    const vec3 viewDirection = normalize(pc.cameraPosition.xyz - material.position.xyz);

    // Slightly offset light
    const vec3 lightForward = normalize(vec3(0.0, 1.0, 5.0));
    const vec3 lightContribution = computeLightContribution(lightForward, material, viewDirection);

    imageStore(image, texelCoord, vec4(lightContribution, 1.0));
}